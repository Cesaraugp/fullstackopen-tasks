{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","noteService","getAll","request","axios","get","nonExisting","id","date","then","response","data","concat","create","newObject","post","update","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","notesToShow","filter","map","find","n","changedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"oLAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,KAAMC,EAAuB,EAAvBA,iBACdC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEtD,OACE,qBAAIC,UAAU,OAAd,UACGJ,EAAKK,QACN,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCNpCK,EAAU,2DA8BDC,EANK,CAClBC,OAvBa,WAGb,IAAMC,EAAUC,IAAMC,IAAIL,GACpBM,EAAc,CAClBC,GAAI,IACJT,QAAS,mCACTU,KAAM,2BACNZ,WAAW,GAEb,OAAOO,EAAQM,MAAK,SAACC,GAAD,OAAcA,EAASC,KAAKC,OAAON,OAcvDO,OAXa,SAACC,GAEd,OADgBV,IAAMW,KAAKf,EAASc,GACrBL,MAAK,SAACC,GAAD,OAAcA,EAASC,SAU3CK,OAPa,SAACT,EAAIO,GAElB,OADgBV,IAAMa,IAAN,UAAajB,EAAb,YAAwBO,GAAMO,GAC/BL,MAAK,SAACC,GAAD,OAAcA,EAASC,UCjB9BO,EAPM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAe,MAAXA,EACK,KAEF,qBAAKtB,UAAU,QAAf,SAAwBsB,KCWlBC,EAfA,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GC8ESC,EAjFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,cAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,qBAJxB,mBAITO,EAJS,KAIKC,EAJL,KAWhBC,qBALa,WACXlC,EAAYC,SAASO,MAAK,SAACC,GACzBkB,EAASlB,QAGG,IAEhB,IAwCM0B,EAAcL,EAAUJ,EAAQA,EAAMU,QAAO,SAAC5C,GAAD,OAAUA,EAAKG,aAClE,OACE,gCACE,uCACA,cAAC,EAAD,CAAcuB,QAASc,IACvB,8BACE,yBAAQlC,QAAS,kBAAMiC,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGK,EAAYE,KAAI,SAAC7C,GAAD,OACf,cAAC,EAAD,CAEEA,KAAMA,EACNC,iBAAkB,kBAvDD,SAACa,GAC1B,IAAMd,EAAOkC,EAAMY,MAAK,SAACC,GAAD,OAAOjC,IAAOiC,EAAEjC,MAClCkC,EAAW,2BAAQhD,GAAR,IAAcG,WAAYH,EAAKG,YAEhDK,EACGe,OAAOT,EAAIkC,GACXhC,MAAK,SAACC,GACLkB,EAASD,EAAMW,KAAI,SAACE,GAAD,OAAQA,EAAEjC,KAAOA,EAAKiC,EAAI9B,SAE9CgC,OAAM,SAACC,GAGNT,EAAgB,SAAD,OACJzC,EAAKK,QADD,sCAGf8C,YAAW,WACTV,EAAgB,QACf,KAEHN,EAASD,EAAMU,QAAO,SAACG,GAAD,OAAOA,EAAEjC,KAAOA,SAoCVsC,CAAmBpD,EAAKc,MAF3Cd,EAAKc,SAMhB,uBAAMuC,SAlCM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBnD,QAAS+B,EACTrB,MAAM,IAAI0C,MAAOC,cACjBvD,UAAWwD,KAAKC,SAAW,IAI7BpD,EAAYY,OAAOoC,GAAYxC,MAAK,SAACC,GACnCkB,EAASD,EAAMf,OAAOF,IACtBoB,EAAW,QAuBX,UACE,uBAAOwB,MAAOzB,EAAS0B,SAtCJ,SAACR,GACxBjB,EAAWiB,EAAMS,OAAOF,UAsCpB,wBAAQG,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MC9ENC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e5b075ea.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? \"make not important\" : \"make important\";\n\n  return (\n    <li className=\"note\">\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  );\n};\nexport default Note;\n","import axios from \"axios\";\n\nconst baseUrl = \"https://powerful-mountain-45156.herokuapp.com/api/notes/\";\n\nconst getAll = () => {\n  /* const request = axios.get(baseUrl);\n  return request.then((response) => response.data); */\n  const request = axios.get(baseUrl);\n  const nonExisting = {\n    id: 10000,\n    content: \"This note is not saved to server\",\n    date: \"2019-05-30T17:30:31.098Z\",\n    important: true,\n  };\n  return request.then((response) => response.data.concat(nonExisting));\n};\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject);\n  return request.then((response) => response.data);\n};\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\n  return request.then((response) => response.data);\n};\nconst noteService = {\n  getAll,\n  create,\n  update,\n};\n\nexport default noteService;\n","const Notification = ({ message }) => {\n  if (message == null) {\n    return null;\n  }\n  return <div className=\"error\">{message}</div>;\n};\n\nexport default Notification;\n","const Footer = () => {\n  const footerStyle = {\n    color: \"green\",\n    fontStyle: \"italic\",\n    fontSize: 16,\n  };\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>\n        Note app, Department of Computer Science, University of Helsinki 2021\n      </em>\n    </div>\n  );\n};\nexport default Footer;\n","import { React, useState, useEffect } from \"react\";\nimport Note from \"./components/Note.js\";\nimport noteService from \"../src/services/notes.js\";\nimport Notification from \"./components/Notification.js\";\nimport Footer from \"./components/Footer.js\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"a new note\");\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState();\n\n  const hook = () => {\n    noteService.getAll().then((response) => {\n      setNotes(response);\n    });\n  };\n  useEffect(hook, []);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find((n) => id === n.id);\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n      .update(id, changedNote)\n      .then((response) => {\n        setNotes(notes.map((n) => (n.id !== id ? n : response)));\n      })\n      .catch((error) => {\n        /* alert(`We're sorry, the note \"${note.content}\" is not on the server`); */\n\n        setErrorMessage(\n          `Note '${note.content}' was already removed from server`\n        );\n        setTimeout(() => {\n          setErrorMessage(null);\n        }, 5000);\n\n        setNotes(notes.filter((n) => n.id !== id));\n      });\n  };\n  const handleNoteChange = (event) => {\n    setNewNote(event.target.value);\n  };\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      /*  id: notes.length + 1, */\n    };\n\n    noteService.create(noteObject).then((response) => {\n      setNotes(notes.concat(response));\n      setNewNote(\"\");\n    });\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          Show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">Save</button>\n      </form>\n      <Footer></Footer>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport App from \"./App.js\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}